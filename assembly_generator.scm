;; Created by Amir Arbel and Ronen Finish
; @file assembly_generator
; Main controller of code generation.

(define code-gen
  (lambda (parsed-expression)
    (let
      (
        (leading (car parsed-expression))
      )
      (cond
        ((equal? leading 'if3)
          (translate-if3 parsed-expression)
        )
        ((equal? leading 'seq)
          (translate-sequence parsed-expression)
        )
        ((equal? leading 'or)
          (translate-or parsed-expression)
        )
        ((equal? leading 'applic)
          (translate-applic  parsed-expression)
        )
        ((equal? leading 'tc-applic)
          ;FIXME - sortof working, seg faults
          (translate-applic  parsed-expression)
          ;(translate-tc-applic  parsed-expression)
        )
        ((equal? leading 'lambda-simple)
          (translate-lambda-simple parsed-expression)
        )
        ((equal? leading 'lambda-opt)
          (translate-lambda-opt parsed-expression)
        )
        ((equal? leading 'define)
          (translate-define parsed-expression)
        )
        ((equal? leading 'const)
          (translate-const parsed-expression)
        )
        ((equal? leading 'fvar)
          (translate-fvar parsed-expression)
        )
        ((equal? leading 'bvar)
          (translate-bvar parsed-expression)
        )
        ((equal? leading 'pvar)
          (translate-pvar parsed-expression)
        )
        ;TODO: next 4
        ; something to do with applic...
        ((equal? leading 'set)
          (translate-set parsed-expression)
        )
        ((equal? leading 'box)
          (translate-box parsed-expression)
        )
        ((equal? leading 'box-set)
          (translate-box-set parsed-expression)
        )
        ((equal? leading 'box-get)
          (translate-box-get parsed-expression)
        )
        (else "MOV RAX, SOB_FALSE \n")
      )
    )
  )
)
